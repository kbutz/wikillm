#!/usr/bin/env python\n\"\"\"\nQuick Memory System Status Check\n\nThis script provides a quick status check of the memory system components.\n\"\"\"\nimport sys\nimport os\nfrom datetime import datetime\n\n# Add current directory to path\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n\n\ndef check_memory_system_status():\n    \"\"\"Quick status check of memory system components\"\"\"\n    print(\"üîç Memory System Status Check\")\n    print(\"=\" * 40)\n    \n    status = {\n        \"database_connection\": False,\n        \"required_tables\": False,\n        \"fts_table\": False,\n        \"memory_entries\": 0,\n        \"configuration\": False,\n        \"overall_health\": \"Unknown\"\n    }\n    \n    try:\n        # Test database connection\n        from database import get_db_session\n        from sqlalchemy import text\n        \n        with get_db_session() as db:\n            db.execute(text(\"SELECT 1\")).scalar()\n            status[\"database_connection\"] = True\n            print(\"‚úÖ Database connection: OK\")\n            \n            # Check required tables\n            tables = db.execute(text(\"SELECT name FROM sqlite_master WHERE type='table' ORDER BY name\")).fetchall()\n            table_names = [table.name for table in tables]\n            \n            required_tables = ['users', 'conversations', 'messages', 'user_memory', 'conversation_summaries']\n            missing_tables = [table for table in required_tables if table not in table_names]\n            \n            if not missing_tables:\n                status[\"required_tables\"] = True\n                print(\"‚úÖ Required tables: OK\")\n            else:\n                print(f\"‚ùå Missing tables: {missing_tables}\")\n            \n            # Check FTS table\n            fts_exists = db.execute(text(\"SELECT name FROM sqlite_master WHERE type='table' AND name='conversation_summaries_fts'\")).fetchone()\n            if fts_exists:\n                status[\"fts_table\"] = True\n                print(\"‚úÖ FTS table: OK\")\n            else:\n                print(\"‚ö†Ô∏è  FTS table: Missing (search will use fallback)\")\n            \n            # Check memory entries\n            memory_count = db.execute(text(\"SELECT COUNT(*) FROM user_memory\")).scalar()\n            status[\"memory_entries\"] = memory_count\n            print(f\"üìä Memory entries: {memory_count}\")\n            \n    except Exception as e:\n        print(f\"‚ùå Database check failed: {e}\")\n    \n    try:\n        # Check configuration\n        from config import settings\n        \n        config_attrs = [\n            'memory_consolidation_threshold',\n            'auto_summarize_after_messages',\n            'max_search_results'\n        ]\n        \n        config_ok = all(hasattr(settings, attr) for attr in config_attrs)\n        status[\"configuration\"] = config_ok\n        \n        if config_ok:\n            print(\"‚úÖ Configuration: OK\")\n            print(f\"   Memory consolidation threshold: {getattr(settings, 'memory_consolidation_threshold', 'N/A')}\")\n            print(f\"   Auto-summarize after messages: {getattr(settings, 'auto_summarize_after_messages', 'N/A')}\")\n            print(f\"   Max search results: {getattr(settings, 'max_search_results', 'N/A')}\")\n        else:\n            print(\"‚ùå Configuration: Missing attributes\")\n            \n    except Exception as e:\n        print(f\"‚ùå Configuration check failed: {e}\")\n    \n    # Overall health assessment\n    critical_checks = [status[\"database_connection\"], status[\"required_tables\"], status[\"configuration\"]]\n    if all(critical_checks):\n        status[\"overall_health\"] = \"Healthy\"\n        print(\"\\nüéâ Overall Status: HEALTHY\")\n        print(\"Your memory system is working correctly!\")\n        \n        if not status[\"fts_table\"]:\n            print(\"\\nüí° Recommendation: Run 'python fix_memory_system.py' to enable FTS search\")\n        \n    elif any(critical_checks):\n        status[\"overall_health\"] = \"Degraded\"\n        print(\"\\n‚ö†Ô∏è  Overall Status: DEGRADED\")\n        print(\"Some components are working, but fixes are needed.\")\n        print(\"Run 'python fix_memory_system.py' to apply fixes.\")\n        \n    else:\n        status[\"overall_health\"] = \"Critical\"\n        print(\"\\nüö® Overall Status: CRITICAL\")\n        print(\"Memory system has serious issues.\")\n        print(\"Run 'python fix_memory_system.py' immediately.\")\n    \n    print(f\"\\nüìÖ Status checked at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n    \n    return status\n\n\ndef quick_memory_test():\n    \"\"\"Quick test of memory functionality\"\"\"\n    print(\"\\nüß™ Quick Memory Test\")\n    print(\"-\" * 20)\n    \n    try:\n        from database import get_db_session\n        from memory_manager import MemoryManager\n        from schemas import UserMemoryCreate, MemoryType\n        \n        with get_db_session() as db:\n            memory_manager = MemoryManager(db)\n            \n            # Test memory storage\n            test_memory = UserMemoryCreate(\n                user_id=1,\n                memory_type=MemoryType.EXPLICIT,\n                key=\"test_memory_check\",\n                value=\"system_test_value\",\n                confidence=0.9,\n                source=\"status_check\"\n            )\n            \n            stored_memory = memory_manager.store_memory(test_memory)\n            if stored_memory:\n                print(\"‚úÖ Memory storage: OK\")\n                \n                # Test memory retrieval\n                retrieved_memories = memory_manager.get_user_memories(1, limit=1)\n                if retrieved_memories:\n                    print(\"‚úÖ Memory retrieval: OK\")\n                else:\n                    print(\"‚ùå Memory retrieval: Failed\")\n            else:\n                print(\"‚ùå Memory storage: Failed\")\n                \n    except Exception as e:\n        print(f\"‚ùå Memory test failed: {e}\")\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    try:\n        status = check_memory_system_status()\n        \n        if status[\"overall_health\"] in [\"Healthy\", \"Degraded\"]:\n            quick_memory_test()\n        \n        print(\"\\n\" + \"=\" * 40)\n        print(\"For detailed diagnostics, run: python memory_system_test.py\")\n        print(\"To apply fixes, run: python fix_memory_system.py\")\n        \n        return status[\"overall_health\"] == \"Healthy\"\n        \n    except Exception as e:\n        print(f\"Status check failed: {e}\")\n        return False\n\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)\n