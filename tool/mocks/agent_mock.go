// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go
//
// Generated by this command:
//
//	mockgen -source=agent.go -package=main -destination=./mocks/agent_mock.go
//

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTool is a mock of Tool interface.
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
}

// MockToolMockRecorder is the mock recorder for MockTool.
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance.
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// Description mocks base method.
func (m *MockTool) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockToolMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockTool)(nil).Description))
}

// Execute mocks base method.
func (m *MockTool) Execute(ctx context.Context, args string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, args)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockToolMockRecorder) Execute(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTool)(nil).Execute), ctx, args)
}

// Name mocks base method.
func (m *MockTool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockToolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTool)(nil).Name))
}
